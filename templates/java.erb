package com.bareknucklecoding.plato.json_models;

import java.util.List;
import java.util.ArrayList;

import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;

public class <%= class_name %> {
  <%- fields.each do |field| -%>
    <%= "private #{field[:type]} #{field[:name]};" %>
  <%- end -%>

  public <%= class_name %> unmarshal(JSONObject object) throws JSONException {
<%- @model.fields.each do |field| -%>
  <%- if field.array? -%>
    <%= "#{field_def field} = new Array#{field_type field}();" %>
    <%= "for(int x = 0; x < object.getJSONArray(\"#{field.name}\").length(); x++) {" %>
    <%= "JSONObject #{field_name field}Object = object.getJSONArray(\"#{field.name}\")" %>
    <%= "  .getJSONObject(x);" %>
    <%= "  #{field_name field}.add(new #{model_type_of_array field.type}().unmarshal(#{field_name field}Object));" %>
    <%= "}" %>
  <%- elsif field.model? -%>
    <%= "#{field_def field} = new #{java_type field.type}().unmarshal(object.getJSONObject(\"#{field.name}\"));" %>
  <%- else -%>
    <%= "#{field_def field} = object.#{json_field_call_getter field};" %>
  <%- end -%>
<%- end -%>
    return new <%= class_name %>(<%= constructor_call_args @model.fields %>);
  }

  public JSONObject toJSONObject() throws JSONException {
    JSONObject object = new JSONObject();
    <%- @model.fields.each do |field| -%>
    <%= json_field_call_setter(field) do "object." end %>
    <%- end -%>
    return object;
  }

  public <%= class_name %>(){
  }

  public <%= class_name %>(<%= constructor_arguments %>) {
  <%- fields.each do |field| -%>
      <%= "this.#{field[:name]} = #{field[:name]}" %>;
  <%- end -%>
  }

  <%- getters.each do |getter| -%>
  public <%="#{getter[:method_type]} #{getter[:method_name]}"%>() {
    return <%= getter[:return_variable] %>;
  }
  <%- end -%>
}
